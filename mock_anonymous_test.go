// Code generated by pegomock. DO NOT EDIT.
// Source: github.com/cdang1234/godoc_dev_sync (interfaces: Anonymous)

package blob

import (
	pegomock "github.com/petergtz/pegomock"
	"reflect"
	"time"
)

type MockAnonymous struct {
	fail func(message string, callerSkip ...int)
}

func NewMockAnonymous(options ...pegomock.Option) *MockAnonymous {
	mock := &MockAnonymous{}
	for _, option := range options {
		option.Apply(mock)
	}
	return mock
}

func (mock *MockAnonymous) SetFailHandler(fh pegomock.FailHandler) { mock.fail = fh }
func (mock *MockAnonymous) FailHandler() pegomock.FailHandler      { return mock.fail }

func (mock *MockAnonymous) BlobType() reflect.Type {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockAnonymous().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("BlobType", params, []reflect.Type{reflect.TypeOf((*reflect.Type)(nil)).Elem()})
	var ret0 reflect.Type
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(reflect.Type)
		}
	}
	return ret0
}

func (mock *MockAnonymous) LogBlob() {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockAnonymous().")
	}
	params := []pegomock.Param{}
	pegomock.GetGenericMockFrom(mock).Invoke("LogBlob", params, []reflect.Type{})
}

func (mock *MockAnonymous) VerifyWasCalledOnce() *VerifierMockAnonymous {
	return &VerifierMockAnonymous{
		mock:                   mock,
		invocationCountMatcher: pegomock.Times(1),
	}
}

func (mock *MockAnonymous) VerifyWasCalled(invocationCountMatcher pegomock.Matcher) *VerifierMockAnonymous {
	return &VerifierMockAnonymous{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
	}
}

func (mock *MockAnonymous) VerifyWasCalledInOrder(invocationCountMatcher pegomock.Matcher, inOrderContext *pegomock.InOrderContext) *VerifierMockAnonymous {
	return &VerifierMockAnonymous{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		inOrderContext:         inOrderContext,
	}
}

func (mock *MockAnonymous) VerifyWasCalledEventually(invocationCountMatcher pegomock.Matcher, timeout time.Duration) *VerifierMockAnonymous {
	return &VerifierMockAnonymous{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		timeout:                timeout,
	}
}

type VerifierMockAnonymous struct {
	mock                   *MockAnonymous
	invocationCountMatcher pegomock.Matcher
	inOrderContext         *pegomock.InOrderContext
	timeout                time.Duration
}

func (verifier *VerifierMockAnonymous) BlobType() *MockAnonymous_BlobType_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "BlobType", params, verifier.timeout)
	return &MockAnonymous_BlobType_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockAnonymous_BlobType_OngoingVerification struct {
	mock              *MockAnonymous
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockAnonymous_BlobType_OngoingVerification) GetCapturedArguments() {
}

func (c *MockAnonymous_BlobType_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierMockAnonymous) LogBlob() *MockAnonymous_LogBlob_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "LogBlob", params, verifier.timeout)
	return &MockAnonymous_LogBlob_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockAnonymous_LogBlob_OngoingVerification struct {
	mock              *MockAnonymous
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockAnonymous_LogBlob_OngoingVerification) GetCapturedArguments() {
}

func (c *MockAnonymous_LogBlob_OngoingVerification) GetAllCapturedArguments() {
}
